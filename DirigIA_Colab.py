import os
os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--disable-logging"
import sys
import threading
import time
import cv2
import numpy as np
import pyautogui
import easyocr
import tempfile
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWebEngineWidgets import QWebEngineView, QWebEnginePage, QWebEngineProfile, QWebEngineScript
from PyQt5.QtWebEngineCore import QWebEngineUrlRequestInterceptor
from PyQt5.QtCore import Qt, QTimer, QUrl
from Overlay_DirigIA_Colab import OverlayWindow
import win32api
import mss


# üîπ Intercepta requisi√ß√µes para alterar o cabe√ßalho Accept-Language
class RequestInterceptor(QWebEngineUrlRequestInterceptor):
    def interceptRequest(self, info):
        info.setHttpHeader(b"Accept-Language", b"pt-BR,pt;q=0.9")

# üî∏ Janela principal com navegador
class Browser(QMainWindow):
    def __init__(self, menu_flutuante=None, janela_principal=None):
        super().__init__()
        self.menu_flutuante = menu_flutuante
        self.janela_principal = janela_principal  # acesso √† central sonora
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Tool)
        self.setWindowTitle("Processador do DirigIA")
        # üñ•Ô∏è Resolu√ß√£o f√≠sica da tela
        screen = QApplication.primaryScreen().availableGeometry()
        screen_w, screen_h = screen.width(), screen.height()

        # üìê Dimens√µes da janela com base nas porcentagens fornecidas
        janela_w = int(screen_w * 0.2376)   # 23,76% da largura
        janela_h = int(screen_h * 0.6512)   # 65,12% da altura
        self.resize(janela_w, janela_h)

        # üìç Posi√ß√£o da janela com base nas margens
        margem_esquerda = int(screen_w * 0.3812)
        margem_cima = int(screen_h * 0.1744)
        self.move(margem_esquerda, margem_cima)

        self.popups = []  # <-- lista para manter refer√™ncia aos popups

        self.profile = QWebEngineProfile.defaultProfile()
        self.profile.setHttpUserAgent(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.112 Safari/537.36"
        )

        # OCR Config
        self.ocr_ativo = False
        self.ocr_thread_iniciado = False
        self.overlay = None
        self.reader = easyocr.Reader(['pt'], gpu=False)
        self.run_id = 0 # Identificador √∫nico para cada ciclo de OCR
        self.detect_state = {"Conectando": {"first_seen": None, "timer": None}, "Reiniciando": {"first_seen": None, "timer": None}, "output": {"first_seen": None, "timer": None}}
        self.special = {"Conectando", "Reiniciando", "output"}
        self.palavras_alvo = ["assim", "Conectar ao Google Drive", "Aceitar", "Erro", "Falha", "Conectar", "Reconectar", "Configura√ß√£o", "Conectando", "Sim", "Reiniciando", "output", "Perfil"]
        # Lista de palavras para apenas mover o cursor (sem clique)
        self.palavras_destacar = ["Conectando", "Conectar", "Reconectar", "Erro", "Falha", "Reiniciando"]
        # Lista de palavras que devem ser clicadas
        self.palavras_clicar = ["Aceitar", "Sim", "assim", "Conectar ao Google Drive", "Configura√ß√£o", "output", "Perfil"]

        #WebEngine Config
        temp_profile_dir = tempfile.mkdtemp()
        self.profile = QWebEngineProfile("temporary_profile", self)
        self.profile.setPersistentStoragePath(temp_profile_dir)

        self.interceptor = RequestInterceptor()
        self.profile.setUrlRequestInterceptor(self.interceptor)

        # üß† SilentPage definida dentro da classe
        class SilentPage(QWebEnginePage):
            def javaScriptConsoleMessage(self, level, message, lineNumber, sourceID):
                # Ignora mensagens de JS que poluem o terminal
                if any(term in message for term in [
                    "RangeError",
                    "clipboard-write",
                    "Maximum call stack size exceeded",
                    "Failed to execute",
                    "Partial keyframes are not supported",
                    ":focus-visible",
                    "translate(0px, 0px) scale(Infinity)",
                    "Skipping recording uncaught error from XHR",
                    "Ignoring benign restart error",
                    "CustomError: Falha",
                    "Refused to load the script",
                    "Content Security Policy directive",
                    "strict-dynamic is present",
                    "Failed KXHR fetch",
                    "TypeError: Failed to fetch",
                    "No output window available",
                    "Service workers are disabled",
                    "CustomError: Timed out waiting for service worker registration",
                    "TypeError: tokens.at is not a function",
                    "handleInvoke: error name: TypeError"
                ]):
                    return
                super().javaScriptConsoleMessage(level, message, lineNumber, sourceID)

        # üåê Inicializa√ß√£o do navegador com SilentPage
        self.browser = QWebEngineView()
        self.page = SilentPage(self.profile, self.browser)
        self.browser.setPage(self.page)
        self.setCentralWidget(self.browser)
        self.page.createWindow = self.handle_popup

        # ‚¨Ö Polyfill para structuredClone
        polyfill = QWebEngineScript()
        polyfill.setName("StructuredClonePolyfill")
        polyfill.setInjectionPoint(QWebEngineScript.DocumentCreation)
        polyfill.setRunsOnSubFrames(True)
        polyfill.setWorldId(QWebEngineScript.MainWorld)
        polyfill.setSourceCode("""
        if (typeof structuredClone === 'undefined') {
            window.structuredClone = function(obj) {
                return JSON.parse(JSON.stringify(obj));
            }
        }
        """)
        self.page.scripts().insert(polyfill)

        # üìã Obter todos os modos de resolu√ß√£o de tela suportados
        modos_suportados = set()
        i = 0
        while True:
            try:
                devmode = win32api.EnumDisplaySettings(None, i)
                modos_suportados.add((devmode.PelsWidth, devmode.PelsHeight))
                i += 1
            except:
                break
            
        # üìå Determinar resolu√ß√£o nativa (maior largura e altura)
        resolucao_nativa = max(modos_suportados, key=lambda m: (m[0], m[1]))
        # print(f"üß† Resolu√ß√£o nativa (m√°xima) detectada: {resolucao_nativa[0]}x{resolucao_nativa[1]}")

        # üìå Resolu√ß√£o atual
        screen = QApplication.primaryScreen().availableGeometry()
        resolucao_atual = (screen.width(), screen.height())
        # print(f"üì∫ Resolu√ß√£o atual: {resolucao_atual[0]}x{resolucao_atual[1]}")

        # üîç S√≥ entra no zoom se a resolu√ß√£o atual for diferente da nativa
        if resolucao_atual != resolucao_nativa:
            screen_w, screen_h = resolucao_atual
            fator_zoom = 1.0
            if screen_w < 1280:      
                fator_zoom = 0.55    # üü† Telas SD (55%)
            elif screen_w < 1366:    
                fator_zoom = 0.7    # üü§ SD entre HD (70%)
            elif screen_w < 1600:    
                fator_zoom = 0.75   # üü° HD (75%)
            elif screen_w < 1920:    
                fator_zoom = 0.9    # üîµ Intermedi√°rias (90%)
            elif screen_w < 2560:    
                fator_zoom = 1.0    # ‚ö™ Full HD (100%)
            else:                     
                fator_zoom = 1.1    # üü¢ 2K, 4K ou maiores (110%)

            # Inje√ß√£o de CSS zoom no DOM
            zoom_script = QWebEngineScript()
            zoom_script.setName("ForceZoomCSS")
            zoom_script.setInjectionPoint(QWebEngineScript.DocumentReady)  # ap√≥s DOM pronto
            zoom_script.setRunsOnSubFrames(True)
            zoom_script.setWorldId(QWebEngineScript.MainWorld)
            zoom_script.setSourceCode(f"""
                document.documentElement.style.zoom = '{fator_zoom}';
            """)
            self.page.scripts().insert(zoom_script)

            # print(f"üìè Zoom DOM injetado: {fator_zoom}")
        else:
            pass
            # print("üñ•Ô∏è Resolu√ß√£o atual √© igual √† nativa. Nenhum zoom aplicado.")

        # Conex√µes de sinais
        self.page.urlChanged.connect(self.verificar_login_concluido)
        self.page.featurePermissionRequested.connect(self.grant_permissions)
        self.browser.page().fullScreenRequested.connect(lambda request: request.accept())

        # üîó P√°gina de autentica√ß√£o inicial
        self.browser.load(QUrl("https://accounts.google.com/v3/signin/accountchooser?continue=https%3A%2F%2Fcolab.research.google.com%2Fdrive%2F1pzsjUw61oMICpkaFqQO2G7mhXV2hhqqk%3Fusp%3Dsharing&ec=GAZAqQM&flowEntry=ServiceLogin&flowName=GlifWebSignIn&hl=pt-en"))

    # Detectar sa√≠da do login
    def verificar_login_concluido(self, url):
        url_str = url.toString()
        if "accounts.google.com" not in url_str and not any(popup.isVisible() for popup in self.popups):
            # print(f"‚úÖ Login conclu√≠do. URL atual: {url_str}")
            
            if not self.ocr_ativo and not self.ocr_thread_iniciado:
                self.ocr_ativo = True
                # print("üîÑ OCR ativado ap√≥s login.")
                self.iniciar_ocr_em_thread()
                self.ocr_thread_iniciado = True
                # print("üîÑ M√©todo Thread chamado.")
                QTimer.singleShot(6000, lambda: self.janela_principal.reproduzirSomPreCarregado("isso_levara_alguns_minutos"))
            else:
                if not self.ocr_ativo:
                    self.ocr_ativo = True
                    # print("üîÑ OCR j√° tinha sido ativo, mas est√° sendo reativado ap√≥s login.")

            # üñ•Ô∏è Configura√ß√µes da janela ap√≥s login
            self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)

            # üñ•Ô∏è Obtendo resolu√ß√£o do monitor
            screen = QApplication.primaryScreen().availableGeometry()
            screen_w, screen_h = screen.width(), screen.height()

            # üìê Novas dimens√µes (39,14% largura, 82,56% altura)
            janela_w = int(screen_w * 0.3914)
            janela_h = int(screen_h * 0.8256)
            self.resize(janela_w, janela_h)

            # üìç Posi√ß√£o: encostada na direita e centralizada verticalmente
            x = screen_w - janela_w
            y = int(screen_h * 0.08715)  # margem superior de 8,715%
            self.move(x, y)

            self.show()  # reaplica as flags e mostra

            self.mostrar_overlay_dirigia_colab()

            # print(f"üß™ Overlay isVisible? {self.overlay.isVisible()} ‚Äî isWidgetType: {self.overlay.isWidgetType()}")

        else:
            self.ocr_ativo = False
            # print(f"‚õî Ainda na tela de login: {url_str}")

    def mostrar_overlay_dirigia_colab(self):
        if not self.overlay:
            self.overlay = OverlayWindow()
            self.overlay.setAttribute(Qt.WA_QuitOnClose, False)
        self.overlay.show()
        if self.menu_flutuante:
            QTimer.singleShot(0, self.menu_flutuante.desligarDirigIA)
            # print("DirigIA foi desligado diretamente.")
    
    def ocultar_overlay_dirigia_colab(self):
        if self.overlay and self.overlay.isVisible():
            self.overlay.hide()
            # print("Overlay ocultado.")
            if self.menu_flutuante:
                QTimer.singleShot(0, self.menu_flutuante.ligarDirigIA)
                # print("M√©todo toggleDirigIA chamado diretamente.")   

    def verificarPalavraConfirmada(self, palavra, bbox):
        """Verifica se uma palavra ainda est√° vis√≠vel de forma consistente na tela."""
        try:
            # Resolu√ß√£o da tela
            screen = QApplication.primaryScreen().availableGeometry()
            screen_w, screen_h = screen.width(), screen.height()

            # √Årea √∫til igual √† janela p√≥s-login
            capture_width = int(screen_w * 0.3914)
            left = screen_w - capture_width
            top = int(screen_h * 0.08715)

            # Coordenadas absolutas da regi√£o do bbox
            (x_min, y_min), (x_max, y_max) = bbox[0], bbox[2]
            region_x = left + int(x_min)
            region_y = top + int(y_min)
            region_w = int(x_max - x_min)
            region_h = int(y_max - y_min)

            # Captura da regi√£o usando mss (mais r√°pido que pyautogui)
            with mss.mss() as sct:
                monitor = {
                    "top": region_y,
                    "left": region_x,
                    "width": region_w,
                    "height": region_h
                }
                img = np.array(sct.grab(monitor))[:, :, :3]  # RGB

            # Nova leitura OCR
            novos_resultados = self.reader.readtext(img, detail=1, paragraph=False)
            palavra_confirmada = any(
                palavra.lower() in txt.lower().replace(" ", "")
                for _, txt, _ in novos_resultados
            )

            #print(f"Verifica√ß√£o de palavra '{palavra}':", "Confirmada" if palavra_confirmada else "N√£o confirmada")
            return palavra_confirmada

        except Exception as e:
            # print(f"Erro ao verificar a palavra '{palavra}': {e}")
            return False

    def grant_permissions(self, security_origin, feature):
        self.page.setFeaturePermission(
            security_origin,
            feature,
            QWebEnginePage.PermissionGrantedByUser
        )
    
    def iniciar_ocr_em_thread(self):
        thread = threading.Thread(target=self.loop_ocr, daemon=True)
        thread.start()
        # print("üîÑ Thread de OCR iniciada.")

    def handle_popup(self, window_type):
        self.ocr_ativo = False  # ‚õî Desativa OCR assim que o popup abre

        popup = QWebEngineView()
        popup_page = QWebEnginePage(self.profile, popup)
        popup.setPage(popup_page)
        popup.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        popup.setWindowTitle("Pop-up de Autentica√ß√£o")

        # üñ•Ô∏è Resolu√ß√£o f√≠sica da tela
        screen = QApplication.primaryScreen().availableGeometry()
        screen_w, screen_h = screen.width(), screen.height()

        # üìê Dimens√µes da janela com base nas porcentagens fornecidas
        janela_w = int(screen_w * 0.2376)   # 23,76% da largura
        janela_h = int(screen_h * 0.6512)   # 65,12% da altura
        popup.resize(janela_w, janela_h)

        # üìç Posi√ß√£o da janela com base nas margens
        margem_esquerda = int(screen_w * 0.3812) - 50  # desloca 50px para esquerda
        margem_cima = int(screen_h * 0.1744)
        popup.move(margem_esquerda, margem_cima)

        # üìã Obter todos os modos de resolu√ß√£o de tela suportados
        modos_suportados = set()
        i = 0
        while True:
            try:
                devmode = win32api.EnumDisplaySettings(None, i)
                modos_suportados.add((devmode.PelsWidth, devmode.PelsHeight))
                i += 1
            except:
                break
            
        # üìå Determinar resolu√ß√£o nativa (maior largura e altura)
        resolucao_nativa = max(modos_suportados, key=lambda m: (m[0], m[1]))
        # print(f"üß† Resolu√ß√£o nativa (m√°xima) detectada: {resolucao_nativa[0]}x{resolucao_nativa[1]}")

        # üìå Resolu√ß√£o atual
        screen = QApplication.primaryScreen().availableGeometry()
        resolucao_atual = (screen.width(), screen.height())
        # print(f"üì∫ Resolu√ß√£o atual: {resolucao_atual[0]}x{resolucao_atual[1]}")

        # üîç S√≥ entra no zoom se a resolu√ß√£o atual for diferente da nativa
        if resolucao_atual != resolucao_nativa:
            screen_w, screen_h = resolucao_atual
            fator_zoom = 1.0
            if screen_w < 1280:      
                fator_zoom = 0.55    # üü† Telas SD (55%)
            elif screen_w < 1366:    
                fator_zoom = 0.7    # üü§ SD entre HD (70%)
            elif screen_w < 1600:    
                fator_zoom = 0.75   # üü° HD (75%)
            elif screen_w < 1920:    
                fator_zoom = 0.9    # üîµ Intermedi√°rias (90%)
            elif screen_w < 2560:    
                fator_zoom = 1.0    # ‚ö™ Full HD (100%)
            else:                     
                fator_zoom = 1.1    # üü¢ 2K, 4K ou maiores (110%)

            # Inje√ß√£o de CSS zoom no DOM
            zoom_script = QWebEngineScript()
            zoom_script.setName("ForceZoomCSS")
            zoom_script.setInjectionPoint(QWebEngineScript.DocumentReady)  # ap√≥s DOM pronto
            zoom_script.setRunsOnSubFrames(True)
            zoom_script.setWorldId(QWebEngineScript.MainWorld)
            zoom_script.setSourceCode(f"""
                document.documentElement.style.zoom = '{fator_zoom}';
            """)
            popup_page.scripts().insert(zoom_script)

            # print(f"üìè Zoom DOM injetado: {fator_zoom}")
        else:
            pass
            # print("üñ•Ô∏è Resolu√ß√£o atual √© igual √† nativa. Nenhum zoom aplicado.")

        popup_page.featurePermissionRequested.connect(
            lambda origin, feature: popup_page.setFeaturePermission(
                origin, feature, QWebEnginePage.PermissionGrantedByUser
            )
        )
        
        # üîÅ Monitorar s√≥ o popup
        def monitor_url(url):
            current_url = url.toString()
            if current_url.startswith((
                "https://colab.research.google.com/tun/m/authorize-for-drive-credentials-ephem?state=",
                "https://colab.research.google.com/tun/m/authorize-for-drive-credentials-ephem?error="
            )):
                # print(f"üîê Autentica√ß√£o conclu√≠da no popup: {current_url}")
                # ‚úÖ Reativa OCR ap√≥s fechamento do popup
                def finalizar_popup():
                    popup.close()
                    popup.setPage(None)  # desvincula a p√°gina do perfil
                    popup_page.deleteLater()  # garante que a p√°gina ser√° destru√≠da
                    popup.deleteLater()  # <- garante libera√ß√£o de mem√≥ria
                    self.popups = [p for p in self.popups if p.isVisible()]
                    self.ocr_ativo = True
                    # print("‚úÖ Popup fechado, OCR reativado.")

                QTimer.singleShot(1000, finalizar_popup)  # D√° 1s de margem antes de fechar
                QTimer.singleShot(5000, lambda: self.janela_principal.reproduzirSomPreCarregado("esta_tudo_pronto"))
                
        popup_page.urlChanged.connect(monitor_url)

        #Visualiza URL da p√°gina‚§µ
        #popup_page.urlChanged.connect(lambda url: print(f"üåê URL atual do popup: {url.toString()}"))

        self.popups.append(popup)  # <-- armazenar refer√™ncia
        popup.show()
        return popup.page()

    # üåÄ OCR Loop com clique corrigido
    def loop_ocr(self):
        while True:
            if self.ocr_ativo:
                try:
                    # üñ•Ô∏è Obtendo resolu√ß√£o da tela principal usando PyQt5
                    screen = QApplication.primaryScreen().availableGeometry()
                    screen_width, screen_height = screen.width(), screen.height()

                    # üìê Dimens√µes da √°rea de captura (mesmas da janela p√≥s-login)
                    capture_width = int(screen_width * 0.3914)   # 39,14% da largura
                    capture_height = int(screen_height * 0.8256) # 82,56% da altura

                    # üìç Posi√ß√£o: encostada na direita e centralizada verticalmente
                    left = screen_width - capture_width
                    top = int(screen_height * 0.08715)  # margem superior de 8,715%

                    # üñºÔ∏è Captura da regi√£o
                    screenshot = pyautogui.screenshot(region=(left, top, capture_width, capture_height))
                    img = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

                    resultados = self.reader.readtext(img, detail=1, paragraph=False)

                    for bbox, texto, conf in resultados:
                        if not any(p.lower() in texto.lower() for p in self.palavras_alvo):
                            continue  # pula palavras n√£o relevantes

                        texto_lower = texto.lower()  # Normalizando a palavra
                        palavra_encontrada = next((p for p in self.palavras_alvo if p.lower() in texto_lower), None)

                        # Coordenadas absolutas do clique (centro do bbox)
                        (x_min, y_min), (x_max, y_max) = bbox[0], bbox[2]
                        click_x = left + int((x_min + x_max) // 2)
                        click_y = top + int((y_min + y_max) // 2)

                        if palavra_encontrada in self.palavras_destacar:
                            pyautogui.moveTo(click_x, click_y)
                            # print(f"üü¢ '{palavra_encontrada}' destacado em ({click_x}, {click_y})")

                        elif palavra_encontrada in self.palavras_clicar:
                            pyautogui.click(click_x, click_y)
                            # print(f"üü¢ '{palavra_encontrada}' clicada em ({click_x}, {click_y})")

                        # Se n√£o for especial, resetamos e executamos a√ß√µes imediatas:
                        if palavra_encontrada not in self.special:
                            self.run_id += 1

                            #Rotina de condi√ß√µes

                            if "assim" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6) #Pressionar√° 4 vezes o bot√£o PageDown
                                # print(f"üü¢ palavra '{palavra_encontrada}' identificado! O bot√£o Pagedown foi pressionado!")
                                continue
                            elif "Aceitar" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6) #Pressionar√° 4 vezes o bot√£o PageDown
                                time.sleep(1)
                                pyautogui.hotkey('ctrl', 'f9')
                                time.sleep(1)
                                pyautogui.click(click_x, click_y) # Segundo clique no mesmo ponto
                                pyautogui.press('esc', presses=3)
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6)
                                # print(f"üü¢ palavra '{palavra_encontrada}' identificado! O bot√£o Pagedown foi pressionado!")
                                continue
                            elif "Conectar ao Google Drive" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6) #Pressionar√° 4 vezes o bot√£o PageDown
                                # print(f"üü¢ palavra '{palavra_encontrada}' identificado! O bot√£o Pagedown foi pressionado!")
                                continue
                            elif "Configura√ß√£o" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6)
                                time.sleep(1)
                                pyautogui.hotkey('ctrl', 'f9')
                                time.sleep(1)
                                # print(f"üü¢ Palavra '{palavra_encontrada}' identificado! Descendo a p√°gina!")
                                continue
                            elif "Erro" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6)
                                time.sleep(0.1)
                                pyautogui.press('esc', presses=3)
                                pyautogui.hotkey('ctrl', 'm', 'i')
                                time.sleep(1)
                                pyautogui.press('esc', presses=3)
                                pyautogui.hotkey('ctrl', 'f9')
                                time.sleep(0.1)
                                pyautogui.press('pagedown', presses=6)
                                time.sleep(1)
                                # print(f"üü¢ Palavra '{palavra_encontrada}' identificado! Descendo a p√°gina e executando todo o c√≥digo do colab!")
                                continue

                            elif "Falha" in palavra_encontrada:
                                time.sleep(1)
                                pyautogui.press('pagedown', presses=6)
                                time.sleep(0.1)
                                pyautogui.press('esc', presses=3)
                                pyautogui.hotkey('ctrl', 'm', 'i')
                                time.sleep(1)
                                pyautogui.press('esc', presses=3)
                                pyautogui.hotkey('ctrl', 'f9')
                                time.sleep(0.1)
                                pyautogui.press('pagedown', presses=6)
                                time.sleep(1)
                                # print(f"üü¢ Palavra '{palavra_encontrada}' identificado! Descendo a p√°gina e executando todo o c√≥digo do colab!")
                                continue

                            elif "Perfil" in palavra_encontrada:

                                if not self.ocr_ativo:
                                    # print("Nenhum vest√≠gio de palavra 'Perfil' encontrado. OCR permanece desligado.")
                                    break

                                # Captura e confirma√ß√£o da palavra encontrada
                                if self.verificarPalavraConfirmada("Perfil", bbox):
                                    # print(f"üü¢ 'Perfil' destacado em {bbox[0]}")

                                    # Esconde o overlay
                                    QTimer.singleShot(0, self.ocultar_overlay_dirigia_colab)
                                    # print("üü¢ A palavra 'Perfil' ainda est√° vis√≠vel de forma consistente. üì∑ Mostrando c√¢mera!")

                                    # Chama o abrir_browser do MenuFlutuante, passando o bbox
                                    if self.menu_flutuante:
                                        self.menu_flutuante.bbox_perfil = bbox  # üëà salva antes da contagem
                                        QTimer.singleShot(0, lambda: self.menu_flutuante.abrir_browser(bbox_perfil=bbox))

                                        perfil = self.menu_flutuante.last_selected_perfil
                                        if perfil == "Essencial":
                                            pyautogui.press('e')
                                            # print("üß† Perfil 'Essencial' selecionado ‚Üí pressionando tecla 'e'")
                                        elif perfil == "Recomendado":
                                            pyautogui.press('r')
                                            # print("üß† Perfil 'Recomendado' selecionado ‚Üí pressionando tecla 'r'")
                                        elif perfil == "Cr√≠tico":
                                            pyautogui.press('c')
                                            # print("üß† Perfil 'Cr√≠tico' selecionado ‚Üí pressionando tecla 'c'")

                                elif self.ocr_ativo:
                                    self.menu_flutuante.bbox_perfil = bbox  # üëà salva antes da contagem
                                    QTimer.singleShot(0, self.mostrar_overlay_dirigia_colab)
                                    # print("üîµ A palavra 'Perfil' n√£o foi mais detectada de forma consistente. Nenhuma a√ß√£o foi tomada.")
                                else:
                                    pass
                                    # print("üö´ OCR est√° desligado. Nenhum overlay ser√° mostrado.")

                                continue

                            else:
                                if "Conectar" in palavra_encontrada:
                                    time.sleep(1)
                                    pyautogui.hotkey('ctrl', 'f9')
                                    time.sleep(1)
                                    # print(f"üü¢ Palavra '{palavra_encontrada}' identificado! Executar todo o c√≥digo do colab!")
                                    continue

                                elif "Reconectar" in palavra_encontrada:
                                    time.sleep(1)
                                    pyautogui.hotkey('ctrl', 'f9')
                                    time.sleep(1)
                                    # print(f"üü¢ Palavra '{palavra_encontrada}' identificado! Executar todo o c√≥digo do colab!")
                                    continue

                        else:
                            if "Conectando" in palavra_encontrada:
                                state = self.detect_state["Conectando"]
                                now = time.time()

                                # Se √© a primeira vez que aparece, registra e agenda
                                if state["first_seen"] is None:
                                    state["first_seen"] = now

                                    def confirmar_conectando(start_time=now, run_id=self.run_id, bbox_con=bbox):
                                        # Se o contexto mudou, aborta
                                        if run_id != self.run_id:
                                            # print("üü° Confirma√ß√£o de 'Conectando' abortada (reset de contexto)")
                                            self.detect_state["Conectando"] = {"first_seen": None, "timer": None}
                                            return

                                        # Se a palavra reapareceu em outro ciclo, descarta este timer
                                        if self.detect_state["Conectando"]["first_seen"] != start_time:
                                            # print("üü° 'Conectando' reapareceu, timer antigo descartado")
                                            return

                                        # print("‚è≥ Verificando 'Conectando' ap√≥s 5s...")
                                        if self.verificarPalavraConfirmada("Conectando", bbox_con):
                                            pyautogui.press('esc', presses=3)
                                            pyautogui.hotkey('ctrl', 'm', 'i')
                                            # print("üíö 'Conectando' persistiu. Reiniciando o colab.")
                                        else:
                                            pass
                                            # print("üíô 'Conectando' n√£o persistiu. Nenhuma a√ß√£o.")

                                        # Limpa estado
                                        self.detect_state["Conectando"] = {"first_seen": None, "timer": None}

                                    t = threading.Timer(5.0, confirmar_conectando)
                                    state["timer"] = t
                                    t.start()
                                    # print("üü¢ 'Conectando' detectado. Aguardando persist√™ncia 5s.")

                                # Se j√° estava sendo monitorado, n√£o reinicia o timer
                                continue
                            
                            elif "Reiniciando" in palavra_encontrada:
                                state = self.detect_state["Reiniciando"]
                                now = time.time()

                                if state["first_seen"] is None:
                                    state["first_seen"] = now

                                    def confirmar_reiniciando(start_time=now, run_id=self.run_id, bbox_rein=bbox):
                                        if run_id != self.run_id:
                                            # print("üü† Confirma√ß√£o de 'Reiniciando' abortada (reset de contexto)")
                                            self.detect_state["Reiniciando"] = {"first_seen": None, "timer": None}
                                            return

                                        if self.detect_state["Reiniciando"]["first_seen"] != start_time:
                                            # print("üü† 'Reiniciando' reapareceu, timer antigo descartado")
                                            return

                                        # print("‚è≥ Verificando 'Reiniciando' ap√≥s 5s...")
                                        if self.verificarPalavraConfirmada("Reiniciando", bbox_rein):
                                            pyautogui.press('esc', presses=3)
                                            pyautogui.hotkey('ctrl', 'm', 'i')
                                            # print("üíö 'Reiniciando' persistiu. Reiniciando o colab.")
                                        else:
                                            pass
                                            # print("üíô 'Reiniciando' n√£o persistiu. Nenhuma a√ß√£o.")

                                        self.detect_state["Reiniciando"] = {"first_seen": None, "timer": None}

                                    t = threading.Timer(5.0, confirmar_reiniciando)
                                    state["timer"] = t
                                    t.start()
                                    # print("üü¢ 'Reiniciando' detectado. Aguardando persist√™ncia 5s.")

                                continue
                            
                            else:
                                if "output" in palavra_encontrada:
                                    state = self.detect_state["output"]
                                    now = time.time()

                                    if state["first_seen"] is None:
                                        state["first_seen"] = now

                                        def confirmar_output(start_time=now, run_id=self.run_id, bbox_out=bbox):
                                            if run_id != self.run_id:
                                                # print("üü§ Confirma√ß√£o de 'output' abortada (reset de contexto)")
                                                self.detect_state["output"] = {"first_seen": None, "timer": None}
                                                return

                                            if self.detect_state["output"]["first_seen"] != start_time:
                                                # print("üü§ 'output' reapareceu, timer antigo descartado")
                                                return

                                            # print("‚è≥ Verificando 'output' ap√≥s 5s...")
                                            if self.verificarPalavraConfirmada("output", bbox_out):
                                                time.sleep(1)
                                                pyautogui.press('esc', presses=3)
                                                time.sleep(1)
                                                pyautogui.hotkey('pagedown', presses=6)
                                                time.sleep(1)
                                                pyautogui.hotkey('ctrl', 'f9')
                                                time.sleep(1)
                                                # print("üíö 'output' persistiu. Reiniciando o colab.")
                                            else:
                                                pass
                                                # print("üíô 'output' n√£o persistiu. Nenhuma a√ß√£o.")

                                            self.detect_state["output"] = {"first_seen": None, "timer": None}

                                        t = threading.Timer(5.0, confirmar_output)
                                        state["timer"] = t
                                        t.start()
                                        # print("üü¢ 'output' detectado. Aguardando persist√™ncia 5s.")

                                    continue
                                
                except Exception as e:
                    # print(f"Erro no OCR: {e}")
                    pass
            time.sleep(0.5)

# üîπ Iniciar App + Thread OCR
if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)  # <- ESSENCIAL
    janela = Browser()
    janela.show()

    sys.exit(app.exec_())